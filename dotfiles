#!/bin/bash

# Author: Jacob Degeling
# Email: me@jacobdegeling.com
# Website: jacobdegeling.com
# Licence: GPLv3
# Description: Installs dotfiles by symlinking them to $HOME

# Changelog:
#
# 0.2.4
# =====
# * add success, error, warning, and Ok message character differentiation
#   depending on which type of terminal the script is run on. If it's a TTY
#   terminal ($TERM = linux) then the characters used for a terminal emulator
#   (x-term etc) are not present, so they need to be customised.

script_name=${0##*/}
script_version='0.2.4'

colour_bright_def="\033[1m"
colour_red="\033[1;31m"
colour_green="\033[1;32m"
colour_blue="\033[1;34m"
colour_yellow="\033[1;33m"
colour_reset="\033[0m"

force_install=0
dry_run=0
uninstall=0

# Logging stuff from "Cowboy" Ben Alman
# https://github.com/cowboy/dotfiles/blob/master/bin/dotfiles

success_char=✔
warn_char=✔
error_char=✖
ok_char=●

if [ "$TERM" = "linux" ]; then
    success_char=s
    warn_char=w
    error_char=e
    ok_char=o
fi

function e_header()   { echo -e "\n${colour_bright_def}$@${colour_reset}"; }
function e_success()  { echo -e " ${colour_green}${success_char}${colour_reset}  $@"; }
function e_warn()  { echo -e " ${colour_yellow}${warn_char}${colour_reset}  $@"; }
function e_error()    { echo -e " ${colour_red}${error_char}${colour_reset}  $@" >&2; }
function e_ok()    { echo -e " ${colour_blue}${ok_char}${colour_reset}  $@"; }

function usage {

    usage_text="Symbolically links all files in the current directory
    prepended with an underscore into your \$HOME directory ($HOME), replacing
    the underscore with a full-stop thereby creating a dotfile."

    echo -e "${colour_bright_def}usage: ./${script_name} [-hVfnu]${colour_reset}" >&2
    echo -e "\n${usage_text}" | sed -r 's/^ +//g' | fmt -w 72

    e_header 'Options' >&2
    echo ' -h    displays this help' >&2
    echo ' -V    displays the version number' >&2
    echo ' -f    forces the installation to occur even if the target file already exists.' >&2
    echo ' -n    perform a dry run only showing what commands would be exeucted not actually executing them' >&2
    echo ' -u    uninstall dotfile links' >&2

    e_header "Output legend" >&2
    e_error "an error occurred"
    e_warn "the link was made forcefully" >&2
    e_success "success" >&2
    e_ok "nothing was done\n" >&2

    echo 'Written by Jacob Degeling' >&2
    echo 'Bugs to <me@jacobdegeling.com>' >&2
    echo 'Released under the GPL v3' >&2

    exit 1
}

function main () {
    FILES=$(pwd)/_*

    for file in $FILES
    do
        if [ ! -e "$file" ]; then
            e_error "Can't find $file"
            continue
        fi

        basename=${file##*/} # remove characters up to last backslash
        dot_file=$HOME/${basename/_/.} # replace underscore with dot

        if [ $uninstall -eq 1 ]; then
            info="uninstall: $dot_file"
        else
            info="link: $file => $dot_file"
        fi


        if [ $force_install -eq 1 ]; then
            opts="-sf"
        else
            opts="-s"
        fi

        if [ $dry_run -eq 1 ]; then
            echo ln $opts $file $dot_file
        else
            if [ $uninstall -eq 1 ]; then
                rm $dot_file 2> /dev/null
            else
                if [ -e "$dot_file" ] && [ $force_install -ne 1 ]; then
                    e_ok $dot_file already exists
                    continue
                fi

                ln $opts $file $dot_file
            fi

            return_status=$? # $? contains the return status or exit code of the previously run command

            if [ $return_status -eq 0 ]; then
                if [ $force_install -eq 1 ]; then
                    e_warn $info
                else
                    e_success $info
                fi
            else
                e_error $info
            fi
        fi
    done
}

# Parse command line options
while getopts ":hVfnu" opt; do
    case $opt in
        u)
            uninstall=1
            echo dotfiles: uninstalling
            ;;
        n)
            dry_run=1
            echo dotfiles: performing dry run
            ;;
        f)
            force_install=1
            echo dotfiles: performing forced linking
            ;;
        h)
            usage
            ;;
        V)
            echo "v"$script_version
            exit 0
            ;;
        \?)
            e_error "Invalid option: -$OPTARG"
            usage
            ;;
        :)
            e_error "-$OPTARG requires an argument"
            usage
            ;;
    esac
done

# run main function
main
